package Graphics;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;

public class Screen extends Canvas {
	private static final long serialVersionUID = 1L;
	private int[] Pixels;
	public int OpSelected = 0;
	public char Game_State = 'm';
	private int Width, Height;
	private BufferedImage bimg;

	public void clearPixels() {
		for (int i = 0; i < Pixels.length; i++) {
			if (Pixels[i] != 0)
				Pixels[i] = 0;
		}
	}

	public void Render() {
		BufferStrategy BS = getBufferStrategy();
		if (BS == null) {
			bimg = new BufferedImage(Width, Height, BufferedImage.TYPE_INT_RGB);
			setPixels(((DataBufferInt) bimg.getRaster().getDataBuffer()).getData());
			createBufferStrategy(3);
			return;
		}
		clearPixels();
		Graphics g = BS.getDrawGraphics();
		switch (Game_State) {
		case 'm':
			RenderMain();
			break;
		}
	}

	public void RenderMain() {
		for (int y = 0; y < Height; y++) {
			for (int x = 0; x < Width; x++) {
				Pixels[x + (y * Width)] = 0xff0000ff;
			}
		}
	}

	public void setPixels(int[] p) {
		Pixels = p;
	}

	public int[] getPixels() {
		return Pixels;
	}

	public void setWH(int w, int h) {
	}
}
