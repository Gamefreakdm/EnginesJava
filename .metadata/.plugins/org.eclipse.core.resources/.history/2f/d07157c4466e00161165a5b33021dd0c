package Main;

import java.awt.Canvas;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import GameObject.Entity.EntityHandler;
import Graphics.Render.Screen;
import Input.InputHandler;

public class Main implements Runnable {
	private static final long serialVersionUID = 1L;
	private final InputHandler IH = new InputHandler();
	private Window Win1;

	public static void main(String[] args) {
		System.out.println("[System] Starting...");
		Main M = new Main();
		M.Win1 = new Window(800, 600, "Win1", M.IH);
		M.addMouseListener(M.IH);
		M.addMouseMotionListener(M.IH);
		M.Start();
	}

	private boolean Running;

	private void Start() {
		if (Running)
			return;
		Thread thread = new Thread(this);
		thread.start();
		Running = true;
	}

	private final Game game = new Game();
	private final String Title = "Title";

	public void run() {
		int Frames = 0;
		int Updates = 0;
		long Timer = System.currentTimeMillis();
		long lastTime = System.nanoTime();
		double Delta = 0;
		long nowTime = 0;
		final double NS = 1000000000.0 / 60;
		System.out.println("[System] Started");
		while (Running) {
			nowTime = System.nanoTime();
			Delta += (nowTime - lastTime) / NS;
			lastTime = nowTime;
			while (Delta >= 1) {
				game.Update();
				game.KeyUpdate(Win1.getFrame());
				Updates++;
				Delta--;
			}
			Render();
			Frames++;
			if (System.currentTimeMillis() - Timer >= 1000) {
				Timer += 1000;
				Win1.getFrame().setTitle(Title + "   |   " + Frames + " Fps" + "   |   " + Updates + " Updates");
				Frames = 0;
				Updates = 0;
			}
		}
		Stop();
	}

	private final Screen screen = new Screen(Win1.getWidth(), Win1.getHeight(), Win1.getPixels());

	private void Render() {
		final BufferStrategy BS = getBufferStrategy();
		if (BS == null) {
			createBufferStrategy(1);
			return;
		}
		screen.clearPixels();
		if (game.getGs() == "Playing") {
			EntityHandler.RenderMobs(screen);
			EntityHandler.RenderItems(screen);
		}
		screen.RenderCol(0, 0, Win1.getWidth(), Win1.getHeight(), 0x0ff00ff);
		Graphics g = BS.getDrawGraphics();
		g.drawImage(Win1.getBimg(), 0, 0, Win1.getHeight(), Win1.getHeight(), null);
		g.dispose();
		BS.show();
	}

	public void Stop() {
		System.out.println("[System] Stopping...");
		CleanUp();
		System.exit(0);
	}

	private void CleanUp() {
		if (Running)
			return;
		screen.clearPixels();
		Win1.getFrame().dispose();
	}
}